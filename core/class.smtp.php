<?php
/**
 * PHPMailer RFC821 SMTP email transport class.
 * PHP Version 5
 * @package PHPMailer
 * @link https://github.com/PHPMailer/PHPMailer/ The PHPMailer GitHub project
 * @author Marcus Bointon (Synchro/coolbru) <phpmailer@synchromedia.co.uk>
 * @author Jim Jagielski (jimjag) <jimjag@gmail.com>
 * @author Andy Prevost (codeworxtech) <codeworxtech@users.sourceforge.net>
 * @author Brent R. Matzelle (original founder)
 * @copyright 2014 Marcus Bointon
 * @copyright 2010 - 2012 Jim Jagielski
 * @copyright 2004 - 2009 Andy Prevost
 * @license http://www.gnu.org/copyleft/lesser.html GNU Lesser General Public License
 * @note This program is distributed in the hope that it will be useful - WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 */
/**
 * PHPMailer RFC821 SMTP email transport class.
 * Implements RFC 821 SMTP commands and provides some utility methods for sending mail to an SMTP server.
 * @package PHPMailer
 * @author Chris Ryan
 * @author Marcus Bointon <phpmailer@synchromedia.co.uk>
 * @mods StudioJunkyard for Libr8. (devel) <https://github.com/StudioJunkyard/Libr8>
 */class SMTP{public$SMTP_PORT=25;public$CRLF="\r\n";public$do_debug=0;public$Debugoutput='echo';public$do_verp=false;public$Timeout=15;public$Timelimit=30;public$Version='5.2.6';protected$smtp_conn;protected$error;protected$helo_rply;protected function edebug($str){switch($this->Debugoutput){case'error_log':error_log($str);break;case'html':echo htmlentities(preg_replace('/[\r\n]+/','',$str),ENT_QUOTES,'UTF-8')."<br>\n";break;case'echo':default:echo$str;}}public function __construct(){$this->smtp_conn=0;$this->error=null;$this->helo_rply=null;$this->do_debug=0;}public function Connect($host,$port=0,$timeout=30,$options=array()){$this->error=null;if($this->connected()){$this->error=array('error'=>'Already connected to a server');return false;}if(empty($port)){$port=$this->SMTP_PORT;}$errno=0;$errstr='';$socket_context=stream_context_create($options);$this->smtp_conn=@stream_socket_client($host.":".$port,$errno,$errstr,$timeout,STREAM_CLIENT_CONNECT,$socket_context);if(empty($this->smtp_conn)){$this->error=array('error'=>'Failed to connect to server','errno'=>$errno,'errstr'=>$errstr);if($this->do_debug>=1){$this->edebug('SMTP -> ERROR:'.$this->error['error'].": $errstr ($errno)");}return false;}if(substr(PHP_OS,0,3)!='WIN'){$max=ini_get('max_execution_time');if($max!=0&&$timeout>$max){@set_time_limit($timeout);}stream_set_timeout($this->smtp_conn,$timeout,0);}$announce=$this->get_lines();if($this->do_debug>=2){$this->edebug('SMTP -> FROM SERVER:'.$announce);}return true;}public function StartTLS(){$this->error=null;if(!$this->connected()){$this->error=array('error'=>'Called StartTLS() without being connected');return false;}$this->client_send('STARTTLS'.$this->CRLF);$rply=$this->get_lines();$code=substr($rply,0,3);if($this->do_debug>=2){$this->edebug('SMTP -> FROM SERVER:'.$rply);}if($code!=220){$this->error=array('error'=>'STARTTLS not accepted from server','smtp_code'=>$code,'smtp_msg'=>substr($rply,4));if($this->do_debug>=1){$this->edebug('SMTP -> ERROR:'.$this->error['error'].':'.$rply);}return false;}if(!stream_socket_enable_crypto($this->smtp_conn,true,STREAM_CRYPTO_METHOD_TLS_CLIENT)){return false;}return true;}public function Authenticate($username,$password,$authtype='LOGIN',$realm='',$workstation=''){if(empty($authtype)){$authtype='LOGIN';}switch($authtype){case'PLAIN':$this->client_send('AUTH PLAIN'.$this->CRLF);$rply=$this->get_lines();$code=substr($rply,0,3);if($code!=334){$this->error=array('error'=>'AUTH not accepted from server','smtp_code'=>$code,'smtp_msg'=>substr($rply,4));if($this->do_debug>=1){$this->edebug('SMTP -> ERROR:'.$this->error['error'].':'.$rply);}return false;}$this->client_send(base64_encode("\0".$username."\0".$password).$this->CRLF);$rply=$this->get_lines();$code=substr($rply,0,3);if($code!=235){$this->error=array('error'=>'Authentication not accepted from server','smtp_code'=>$code,'smtp_msg'=>substr($rply,4));if($this->do_debug>=1){$this->edebug('SMTP -> ERROR:'.$this->error['error'].':'.$rply);}return false;}break;case'LOGIN':$this->client_send('AUTH LOGIN'.$this->CRLF);$rply=$this->get_lines();$code=substr($rply,0,3);if($code!=334){$this->error=array('error'=>'AUTH not accepted from server','smtp_code'=>$code,'smtp_msg'=>substr($rply,4));if($this->do_debug>=1){$this->edebug('SMTP -> ERROR:'.$this->error['error'].':'.$rply);}return false;}$this->client_send(base64_encode($username).$this->CRLF);$rply=$this->get_lines();$code=substr($rply,0,3);if($code!=334){$this->error=array('error'=>'Username not accepted from server','smtp_code'=>$code,'smtp_msg'=>substr($rply,4));if($this->do_debug>=1){$this->edebug('SMTP -> ERROR:'.$this->error['error'].':'.$rply);}return false;}$this->client_send(base64_encode($password).$this->CRLF);$rply=$this->get_lines();$code=substr($rply,0,3);if($code!=235){$this->error=array('error'=>'Password not accepted from server','smtp_code'=>$code,'smtp_msg'=>substr($rply,4));if($this->do_debug>=1){$this->edebug('SMTP -> ERROR:'.$this->error['error'].':'.$rply);}return false;}break;case'NTLM':require_once'extras/ntlm_sasl_client.php';$temp=new stdClass();$ntlm_client=new ntlm_sasl_client_class;if(!$ntlm_client->Initialize($temp)){$this->error=array('error'=>$temp->error);if($this->do_debug>=1){$this->edebug('You need to enable some modules in your php.ini file:'.$this->error['error']);}return false;}$msg1=$ntlm_client->TypeMsg1($realm,$workstation);$this->client_send('AUTH NTLM '.base64_encode($msg1).$this->CRLF);$rply=$this->get_lines();$code=substr($rply,0,3);if($code!=334){$this->error=array('error'=>'AUTH not accepted from server','smtp_code'=>$code,'smtp_msg'=>substr($rply,4));if($this->do_debug>=1){$this->edebug('SMTP -> ERROR:'.$this->error['error'].':'.$rply);}return false;}$challenge=substr($rply,3);$challenge=base64_decode($challenge);$ntlm_res=$ntlm_client->NTLMResponse(substr($challenge,24,8),$password);$msg3=$ntlm_client->TypeMsg3($ntlm_res,$username,$realm,$workstation);$this->client_send(base64_encode($msg3).$this->CRLF);$rply=$this->get_lines();$code=substr($rply,0,3);if($code!=235){$this->error=array('error'=>'Could not authenticate','smtp_code'=>$code,'smtp_msg'=>substr($rply,4));if($this->do_debug>=1){$this->edebug('SMTP -> ERROR:'.$this->error['error'].':'.$rply);}return false;}break;case'CRAM-MD5':$this->client_send('AUTH CRAM-MD5'.$this->CRLF);$rply=$this->get_lines();$code=substr($rply,0,3);if($code!=334){$this->error=array('error'=>'AUTH not accepted from server','smtp_code'=>$code,'smtp_msg'=>substr($rply,4));if($this->do_debug>=1){$this->edebug('SMTP -> ERROR:'.$this->error['error'].':'.$rply);}return false;}$challenge=base64_decode(substr($rply,4));$response=$username.' '.$this->hmac($challenge,$password);$this->client_send(base64_encode($response).$this->CRLF);$rply=$this->get_lines();$code=substr($rply,0,3);if($code!=235){$this->error=array('error'=>'Credentials not accepted from server','smtp_code'=>$code,'smtp_msg'=>substr($rply,4));if($this->do_debug>=1){$this->edebug('SMTP -> ERROR:'.$this->error['error'].':'.$rply);}return false;}break;}return true;}protected function hmac($data,$key){if(function_exists('hash_hmac')){return hash_hmac('md5',$data,$key);}$b=64;if(strlen($key)>$b){$key=pack('H*',md5($key));}$key=str_pad($key,$b,chr(0x00));$ipad=str_pad('',$b,chr(0x36));$opad=str_pad('',$b,chr(0x5c));$k_ipad=$key^$ipad;$k_opad=$key^$opad;return md5($k_opad.pack('H*',md5($k_ipad.$data)));}public function Connected(){if(!empty($this->smtp_conn)){$sock_status=stream_get_meta_data($this->smtp_conn);if($sock_status['eof']){if($this->do_debug>=1){$this->edebug('SMTP -> NOTICE:EOF caught while checking if connected');}$this->Close();return false;}return true;}return false;}public function Close(){$this->error=null;$this->helo_rply=null;if(!empty($this->smtp_conn)){fclose($this->smtp_conn);$this->smtp_conn=0;}}public function Data($msg_data){$this->error=null;if(!$this->connected()){$this->error=array('error'=>'Called Data() without being connected');return false;}$this->client_send('DATA'.$this->CRLF);$rply=$this->get_lines();$code=substr($rply,0,3);if($this->do_debug>=2){$this->edebug('SMTP -> FROM SERVER:'.$rply);}if($code!=354){$this->error=array('error'=>'DATA command not accepted from server','smtp_code'=>$code,'smtp_msg'=>substr($rply,4));if($this->do_debug>=1){$this->edebug('SMTP -> ERROR:'.$this->error['error'].':'.$rply);}return false;}$msg_data=str_replace("\r\n","\n",$msg_data);$msg_data=str_replace("\r","\n",$msg_data);$lines=explode("\n",$msg_data);$field=substr($lines[0],0,strpos($lines[0],':'));$in_headers=false;if(!empty($field)&&!strstr($field,' ')){$in_headers=true;}$max_line_length=998;while(list(,$line)=@each($lines)){$lines_out=null;if($line==''&&$in_headers){$in_headers=false;}while(strlen($line)>$max_line_length){$pos=strrpos(substr($line,0,$max_line_length),' ');if(!$pos){$pos=$max_line_length-1;$lines_out[]=substr($line,0,$pos);$line=substr($line,$pos);}else{$lines_out[]=substr($line,0,$pos);$line=substr($line,$pos+1);}if($in_headers){$line="\t".$line;}}$lines_out[]=$line;while(list(,$line_out)=@each($lines_out)){if(strlen($line_out)>0){if(substr($line_out,0,1)=='.'){$line_out='.'.$line_out;}}$this->client_send($line_out.$this->CRLF);}}$this->client_send($this->CRLF.'.'.$this->CRLF);$rply=$this->get_lines();$code=substr($rply,0,3);if($this->do_debug>=2){$this->edebug('SMTP -> FROM SERVER:'.$rply);}if($code!=250){$this->error=array('error'=>'DATA not accepted from server','smtp_code'=>$code,'smtp_msg'=>substr($rply,4));if($this->do_debug>=1){$this->edebug('SMTP -> ERROR:'.$this->error['error'].':'.$rply);}return false;}return true;}public function Hello($host=''){$this->error=null;if(!$this->connected()){$this->error=array('error'=>'Called Hello() without being connected');return false;}if(empty($host)){$host='localhost';}if(!$this->SendHello('EHLO',$host)){if(!$this->SendHello('HELO',$host)){return false;}}return true;}protected function SendHello($hello,$host){$this->client_send($hello.' '.$host.$this->CRLF);$rply=$this->get_lines();$code=substr($rply,0,3);if($this->do_debug>=2){$this->edebug('SMTP -> FROM SERVER:'.$rply);}if($code!=250){$this->error=array('error'=>$hello.' not accepted from server','smtp_code'=>$code,'smtp_msg'=>substr($rply,4));if($this->do_debug>=1){$this->edebug('SMTP -> ERROR:'.$this->error['error'].':'.$rply);}return false;}$this->helo_rply=$rply;return true;}public function Mail($from){$this->error=null;if(!$this->connected()){$this->error=array('error'=>'Called Mail() without being connected');return false;}$useVerp=($this->do_verp?' XVERP':'');$this->client_send('MAIL FROM:<'.$from.'>'.$useVerp.$this->CRLF);$rply=$this->get_lines();$code=substr($rply,0,3);if($this->do_debug>=2){$this->edebug('SMTP -> FROM SERVER:'.$rply);}if($code!=250){$this->error=array('error'=>'MAIL not accepted from server','smtp_code'=>$code,'smtp_msg'=>substr($rply,4));if($this->do_debug>=1){$this->edebug('SMTP -> ERROR:'.$this->error['error'].':'.$rply);}return false;}return true;}public function Quit($close_on_error=true){$this->error=null;if(!$this->connected()){$this->error=array('error'=>'Called Quit() without being connected');return false;}$this->client_send('quit'.$this->CRLF);$byemsg=$this->get_lines();if($this->do_debug>=2){$this->edebug('SMTP -> FROM SERVER:'.$byemsg);}$rval=true;$e=null;$code=substr($byemsg,0,3);if($code!=221){$e=array('error'=>'SMTP server rejected quit command','smtp_code'=>$code,'smtp_rply'=>substr($byemsg,4));$rval=false;if($this->do_debug>=1){$this->edebug('SMTP -> ERROR:'.$e['error'].':'.$byemsg);}}if(empty($e)||$close_on_error){$this->Close();}return$rval;}public function Recipient($to){$this->error=null;if(!$this->connected()){$this->error=array('error'=>'Called Recipient() without being connected');return false;}$this->client_send('RCPT TO:<'.$to.'>'.$this->CRLF);$rply=$this->get_lines();$code=substr($rply,0,3);if($this->do_debug>=2){$this->edebug('SMTP -> FROM SERVER:'.$rply);}if($code!=250&&$code!=251){$this->error=array('error'=>'RCPT not accepted from server','smtp_code'=>$code,'smtp_msg'=>substr($rply,4));if($this->do_debug>=1){$this->edebug('SMTP -> ERROR:'.$this->error['error'].':'.$rply);}return false;}return true;}public function Reset(){$this->error=null;if(!$this->connected()){$this->error=array('error'=>'Called Reset() without being connected');return false;}$this->client_send('RSET'.$this->CRLF);$rply=$this->get_lines();$code=substr($rply,0,3);if($this->do_debug>=2){$this->edebug('SMTP -> FROM SERVER:'.$rply);}if($code!=250){$this->error=array('error'=>'RSET failed','smtp_code'=>$code,'smtp_msg'=>substr($rply,4));if($this->do_debug>=1){$this->edebug('SMTP -> ERROR:'.$this->error['error'].':'.$rply);}return false;}return true;}public function SendAndMail($from){$this->error=null;if(!$this->connected()){$this->error=array('error'=>'Called SendAndMail() without being connected');return false;}$this->client_send('SAML FROM:'.$from.$this->CRLF);$rply=$this->get_lines();$code=substr($rply,0,3);if($this->do_debug>=2){$this->edebug('SMTP -> FROM SERVER:'.$rply);}if($code!=250){$this->error=array('error'=>'SAML not accepted from server','smtp_code'=>$code,'smtp_msg'=>substr($rply,4));if($this->do_debug>=1){$this->edebug('SMTP -> ERROR:'.$this->error['error'].':'.$rply);}return false;}return true;}public function Turn(){$this->error=array('error'=>'This method, TURN, of the SMTP is not implemented');if($this->do_debug>=1){$this->edebug('SMTP -> NOTICE:'.$this->error['error']);}return false;}public function client_send($data){if($this->do_debug>=1){$this->edebug("CLIENT -> SMTP:$data");}return fwrite($this->smtp_conn,$data);}public function getError(){return$this->error;}protected function get_lines(){$data='';$endtime=0;if(!is_resource($this->smtp_conn)){return$data;}stream_set_timeout($this->smtp_conn,$this->Timeout);if($this->Timelimit>0){$endtime=time()+$this->Timelimit;}while(is_resource($this->smtp_conn)&&!feof($this->smtp_conn)){$str=@fgets($this->smtp_conn,515);if($this->do_debug>=4){$this->edebug("SMTP -> get_lines():\$data was \"$data\"");$this->edebug("SMTP -> get_lines():\$str is \"$str\"");}$data.=$str;if($this->do_debug>=4){$this->edebug("SMTP -> get_lines():\$data is \"$data\"");}if(substr($str,3,1)==' '){break;}$info=stream_get_meta_data($this->smtp_conn);if($info['timed_out']){if($this->do_debug>=4){$this->edebug('SMTP -> get_lines():timed-out ('.$this->Timeout.' seconds)');}break;}if($endtime){if(time()>$endtime){if($this->do_debug>=4){$this->edebug('SMTP -> get_lines():timelimit reached ('.$this->Timelimit.' seconds)');}break;}}}return$data;}}